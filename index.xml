<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>River&#39;s Site</title>
    <link>http://blog.qikqiak.com/</link>
    <description>Recent content on River&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.qikqiak.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes使用Prometheus搭建监控平台</title>
      <link>http://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/</guid>
      <description>&lt;p&gt;最近在测试环境搭建了&lt;code&gt;Kubernetes&lt;/code&gt;集群环境，迁移了部分测试环境的应用，由于测试集群性能不是很好，有时会遇到集群资源不够的情况，一般情况下我们是直接通过Dashboard的资源统计图标进行观察的，但是很显然如果要上到生产环境，就需要更自动化的方式来对集群、Pod甚至容器进行监控了。&lt;code&gt;Kubernetes&lt;/code&gt;内置了一套监控方案：influxdb+grafana+heapster。但由于之前我们的应用的业务监控使用的是&lt;code&gt;Prometheus&lt;/code&gt;，所以这里准备使用&lt;code&gt;Prometheus&lt;/code&gt;来完成k8s的集群监控。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python装饰器简介</title>
      <link>http://blog.qikqiak.com/post/django-decorator-usage/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/django-decorator-usage/</guid>
      <description>&lt;p&gt;装饰器本质上是一个&lt;code&gt;Python&lt;/code&gt;函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，&lt;strong&gt;装饰器的作用就是为已经存在的对象添加额外的功能&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用awk做基本运算</title>
      <link>http://blog.qikqiak.com/post/awk-base-compute/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/awk-base-compute/</guid>
      <description>&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;是非常强大的文本处理工具，之前经常见到脚本里面有使用，但是没有自己完完整整来写过awk命令。正好今天公司里有一个非常的大的日志文件需要分析。需求是将日志文件中记录的耗时时间评价值、最大值、最小值计算出来。日志的格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[2016-03-30 00:02:02,475] [17243] [140344433927936] [MainThread] [tasks.py:733] DEBUG [upload to oss] upload file /data/image5/user_upload_image/20160330/00/1458483897397580_101183475_1459267295740.jpg to oss cost time 28 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx中如何设置301跳转</title>
      <link>http://blog.qikqiak.com/post/nginx-301-redirect/</link>
      <pubDate>Sat, 27 Feb 2016 21:21:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/nginx-301-redirect/</guid>
      <description>&lt;p&gt;网站中带&lt;code&gt;www&lt;/code&gt;和不带都可以访问，但是这样却会不利于网站&lt;code&gt;SEO&lt;/code&gt;的，会分权，所以需要将二者的访问合并到一起，这特别在网站架设之初就应该好好规划。&lt;/p&gt;

&lt;p&gt;有很多的第三方DNS解析服务，提供了直接的显示跳转的服务，比如&lt;code&gt;dnspod&lt;/code&gt;，但是最近我在使用的过程中发现该服务非常的不稳定，导致网站经常性的访问不了。所以就打算自己来做，方法很简单，就是&lt;code&gt;301跳转&lt;/code&gt;，&lt;strong&gt;301是永久跳转&lt;/strong&gt;，&lt;strong&gt;302是临时性跳转&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用python处理csv文件</title>
      <link>http://blog.qikqiak.com/post/python-process-csv-file/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/python-process-csv-file/</guid>
      <description>&lt;p&gt;&lt;code&gt;CSV&lt;/code&gt;通常是纯文本文件。可以用&lt;code&gt;Sublime Text&lt;/code&gt;或者&lt;code&gt;EXCEL&lt;/code&gt;打开，&lt;code&gt;python&lt;/code&gt;提供了一个非常强大的处理csv文件的库csv。&lt;/p&gt;

&lt;p&gt;一般情况，如果csv文件不是很复杂则可以直接输出文件中每行的数据，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

def read_csv_file(path):
    with open(path, &#39;rb&#39;) as f:  # r表示读取，b表示读取的文件
        reader = csv.reader(f)
        for row in reader:
            print row
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自定义django admin后台的action</title>
      <link>http://blog.qikqiak.com/post/custom-django-admin-actions/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/custom-django-admin-actions/</guid>
      <description>&lt;p&gt;提到强大的&lt;code&gt;django&lt;/code&gt;，最能引起大家共鸣的可能是其自带的&lt;code&gt;admin&lt;/code&gt;了，提供了默认的强大的功能，而且我们还能根据自己的需求进行定制。&lt;code&gt;django admin&lt;/code&gt;的列表页自带了一个批量删除所选对象的action，我们还可以添加自定义的功能action来实现其他功能，比如批量标记将文章标记为已发布。如下代码：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django下url函数的用法</title>
      <link>http://blog.qikqiak.com/post/django-url-function-usage/</link>
      <pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/django-url-function-usage/</guid>
      <description>&lt;p&gt;Django下有一个比较隐含的函数&lt;strong&gt;url&lt;/strong&gt;，在&lt;code&gt;django/conf/urls/defaults&lt;/code&gt;模块中，虽然只有短短的10行代码，但功能却很了得。起初初学&lt;code&gt;Django&lt;/code&gt;，并没有发现它，Templates的链接地址都是根据&lt;code&gt;urlpatterns&lt;/code&gt;定义的地址，拼凑成地址字符串，很难看，而且Templates里拼凑成的地址，随着页面的增加而不断增加，一旦在&lt;code&gt;urlpatterns&lt;/code&gt;里的某个地址改变了名称，那眼泪可是哗哗的，有多少的拼凑的地址就得改动多少处！这时发现了url函数，这下可都好了，不管&lt;code&gt;urlpatterns&lt;/code&gt;里的某个地址叫法怎么改变，&lt;code&gt;Templates&lt;/code&gt;里的地址都不用修改了。&lt;/p&gt;

&lt;p&gt;比如没有采用url函数的时候：&lt;code&gt;urlpatterns&lt;/code&gt;里定义了资讯的首页地址,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;urlpatterns = patterns(&#39;&#39;,
    (r&#39;^article$&#39;,&#39;news_index&#39; ),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memcached的一些坑!!!</title>
      <link>http://blog.qikqiak.com/post/some-pits-of-memcached/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/some-pits-of-memcached/</guid>
      <description>&lt;p&gt;我们的网站用&lt;code&gt;django&lt;/code&gt;跑了很久了，一直没出现什么大的问题，突然一天晚上网站访问超级慢，出现大量的&lt;code&gt;502&lt;/code&gt;错误码，难不成用户量猛增么，要是这样就好了。请教了很多运维高手帮忙排查问题、代码也回滚到上一个正常运行的版本了，但依然负载一会高一会低。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;捣腾了一天，最后定位到我们的代码有问题，有几个经常访问的API缓存了15分钟，经过分析发现其中一个API始终缓存不上，但在本地和测试环境都是没有问题的，这真是搞死人啊。后面发现这个API的请求的数据非常之大，接近2M了。而&lt;strong&gt;Memcache有很多限制，其中就有value值大小的限制&lt;/strong&gt;，终于找到问题了，泪牛满面啊&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django国际化问题</title>
      <link>http://blog.qikqiak.com/post/django-i18n/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/django-i18n/</guid>
      <description>&lt;p&gt;最近准备用用django的国际化功能，用的django1.6.5版本，按照网上说的教程始终不生效，最终只能去看官方文档，不得不说还是官方文档靠谱啊，下面记录了下django1.6+启用国际化的相关步骤。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django自定义标签之inclusion_tag的用法</title>
      <link>http://blog.qikqiak.com/post/django-custom-tag-inclusion_tag/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/post/django-custom-tag-inclusion_tag/</guid>
      <description>&lt;p&gt;&lt;code&gt;django&lt;/code&gt;提供了强大的自定义标签、自定义过滤器等强大功能，今天首先介绍一下自定义标签的&lt;code&gt;inclusion_tags&lt;/code&gt;的用法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://blog.qikqiak.com/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.qikqiak.com/page/about/</guid>
      <description>Nothing in the world can take the place of Persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and Determination alone are omnipotent. The slogan “Press On” has solved and will always solve the problems of the human race.</description>
    </item>
    
  </channel>
</rss>