<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on River&#39;s Site</title>
    <link>https://blog.qikqiak.com/post/</link>
    <description>Recent content in Posts on River&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.qikqiak.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手动搭建高可用的kubernetes 集群</title>
      <link>https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster/</guid>
      <description>&lt;p&gt;本系列文档介绍使用二进制部署最新 &lt;code&gt;kubernetes v1.8.2&lt;/code&gt; 集群的所有步骤，而不是使用 &lt;code&gt;kubeadm&lt;/code&gt; 等自动化方式来部署集群。&lt;/p&gt;

&lt;p&gt;在部署的过程中，将详细列出各组件的启动参数，它们的含义和可能遇到的问题。&lt;/p&gt;

&lt;p&gt;部署完成后，你将理解系统各组件的交互原理，进而能快速解决实际问题。&lt;/p&gt;

&lt;p&gt;所以本文档主要适合于那些有一定 kubernetes 基础，想通过一步步部署的方式来学习和了解系统配置、运行原理的人。&lt;/p&gt;

&lt;p&gt;本系列系文档适用于 &lt;code&gt;CentOS 7&lt;/code&gt;、&lt;code&gt;Ubuntu 16.04&lt;/code&gt; 及以上版本系统，&lt;strong&gt;随着各组件的更新而更新&lt;/strong&gt;，有任何问题欢迎提 issue！&lt;/p&gt;

&lt;p&gt;由于启用了 &lt;code&gt;TLS&lt;/code&gt; 双向认证、&lt;code&gt;RBAC&lt;/code&gt; 授权等严格的安全机制，建议&lt;strong&gt;从头开始部署&lt;/strong&gt;，否则可能会认证、授权等失败！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给博客加上HTTPS</title>
      <link>https://blog.qikqiak.com/post/make-https-blog/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/make-https-blog/</guid>
      <description>&lt;p&gt;谁都不愿意在使用网站服务的时候，被恶心的运营商劫持加上一些他们的服务(真的很贱，不是吗？)，不过这能难道我们程序员吗？当然不能，上&lt;code&gt;https&lt;/code&gt;，老子全站&lt;code&gt;https&lt;/code&gt;，你再劫持给我看看。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https&lt;/code&gt;证书服务大部分都是收费的，而且很贵，阿里云可以申请一个免费的证书，只能绑定一个域名，这里我们使用更加友好的免费&lt;code&gt;https&lt;/code&gt;服务：&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django 中STATIC_ROOT 与STATICFILES_DIRS的区别</title>
      <link>https://blog.qikqiak.com/post/django-staticroot-staticfilesdirs-function/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/django-staticroot-staticfilesdirs-function/</guid>
      <description>&lt;p&gt;在做&lt;code&gt;Django&lt;/code&gt;项目的时候，经常会遇到静态文件访问的问题，在本地开发的时候可以正常的访问静态文件，部署到服务器上后就出现各种幺蛾子了，我猜你一定也遇到过吧？之前在&lt;code&gt;settings.py&lt;/code&gt;配置文件中对&lt;code&gt;STATIC_ROOT&lt;/code&gt;与&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;两个配置项不是特别理解，总感觉都差不多，在线上就把&lt;code&gt;STATIC_ROOT&lt;/code&gt;替换成&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;了，虽然可以解决问题，但是却没有知其所以然。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Python 优雅的将PDF 转换成图片</title>
      <link>https://blog.qikqiak.com/post/python-convert-pdf-images/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/python-convert-pdf-images/</guid>
      <description>&lt;p&gt;之前收集了很多优秀的&lt;code&gt;PDF&lt;/code&gt;文档，但是需要看的时候不是很方便，需要去找到这个文件，如果是在手机上的话往往还需要下载&lt;code&gt;PDF&lt;/code&gt;相关的插件才行，而且最大的问题是不便于资料的整理和分享。如果能够将&lt;code&gt;PDF&lt;/code&gt;转换成网页，岂不是就能解决这些问题了？还能直接分享出去。&lt;/p&gt;

&lt;p&gt;这里利用&lt;code&gt;PyPDF&lt;/code&gt;包来处理&lt;code&gt;PDF&lt;/code&gt;文件，为了方便快捷，我这里直接将一个页面转换成图片，就不需要去识别页面中的每一个&lt;code&gt;PDF&lt;/code&gt;元素了，这是没必要的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务网格(Service Mesh)是什么?</title>
      <link>https://blog.qikqiak.com/post/what-is-service-mesh/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/what-is-service-mesh/</guid>
      <description>&lt;p&gt;现在最火的后端架构无疑是&lt;code&gt;微服务&lt;/code&gt;了，微服务将之前的单体应用拆分成了许多独立的服务应用，每个微服务都是独立的，好处自然很多，但是随着应用的越来越大，微服务暴露出来的问题也就随之而来了，微服务越来越多，管理越来越麻烦，特别是要你部署一套新环境的时候，你就能体会到这种痛苦了，随之而来的&lt;strong&gt;服务发现、负载均衡、Trace跟踪、流量管理、安全认证&lt;/strong&gt;等等问题。如果从头到尾完成过一套微服务框架的话，你就会知道这里面涉及到的东西真的非常多。当然随着微服务的不断发展，微服务的生态也不断完善，最近就发现新一代的微服务开发就悄然兴起了，那就是&lt;code&gt;服务网格/Service Mesh&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Deployment滚动升级</title>
      <link>https://blog.qikqiak.com/post/kubernetes-rollout-update/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/kubernetes-rollout-update/</guid>
      <description>&lt;p&gt;我们&lt;code&gt;k8s&lt;/code&gt;集群使用的是1.7.7版本的，该版本中官方已经推荐使用&lt;code&gt;Deployment&lt;/code&gt;代替&lt;code&gt;Replication Controller&lt;/code&gt;(rc)了，&lt;code&gt;Deployment&lt;/code&gt;继承了rc的全部功能外，还可以查看升级详细进度和状态，当升级出现问题的时候，可以使用回滚操作回滚到指定的版本，每一次对Deployment的操作，都会保存下来，变能方便的进行回滚操作了，另外对于每一次升级都可以随时暂停和启动，拥有多种升级方案：&lt;code&gt;Recreate&lt;/code&gt;删除现在的&lt;code&gt;Pod&lt;/code&gt;，重新创建；&lt;code&gt;RollingUpdate&lt;/code&gt;滚动升级，逐步替换现有&lt;code&gt;Pod&lt;/code&gt;，对于生产环境的服务升级，显然这是一种最好的方式。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes使用Prometheus搭建监控平台</title>
      <link>https://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/</guid>
      <description>&lt;p&gt;最近在测试环境搭建了&lt;code&gt;Kubernetes&lt;/code&gt;集群环境，迁移了部分测试环境的应用，由于测试集群性能不是很好，有时会遇到集群资源不够的情况，一般情况下我们是直接通过Dashboard的资源统计图标进行观察的，但是很显然如果要上到生产环境，就需要更自动化的方式来对集群、Pod甚至容器进行监控了。&lt;code&gt;Kubernetes&lt;/code&gt;内置了一套监控方案：influxdb+grafana+heapster。但由于之前我们的应用的业务监控使用的是&lt;code&gt;Prometheus&lt;/code&gt;，所以这里准备使用&lt;code&gt;Prometheus&lt;/code&gt;来完成k8s的集群监控。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python装饰器简介</title>
      <link>https://blog.qikqiak.com/post/django-decorator-usage/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/django-decorator-usage/</guid>
      <description>&lt;p&gt;装饰器本质上是一个&lt;code&gt;Python&lt;/code&gt;函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，&lt;strong&gt;装饰器的作用就是为已经存在的对象添加额外的功能&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用awk做基本运算</title>
      <link>https://blog.qikqiak.com/post/awk-base-compute/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/awk-base-compute/</guid>
      <description>&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;是非常强大的文本处理工具，之前经常见到脚本里面有使用，但是没有自己完完整整来写过awk命令。正好今天公司里有一个非常的大的日志文件需要分析。需求是将日志文件中记录的耗时时间评价值、最大值、最小值计算出来。日志的格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[2016-03-30 00:02:02,475] [17243] [140344433927936] [MainThread] [tasks.py:733] DEBUG [upload to oss] upload file /data/image5/user_upload_image/20160330/00/1458483897397580_101183475_1459267295740.jpg to oss cost time 28 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx中如何设置301跳转</title>
      <link>https://blog.qikqiak.com/post/nginx-301-redirect/</link>
      <pubDate>Sat, 27 Feb 2016 21:21:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/nginx-301-redirect/</guid>
      <description>&lt;p&gt;网站中带&lt;code&gt;www&lt;/code&gt;和不带都可以访问，但是这样却会不利于网站&lt;code&gt;SEO&lt;/code&gt;的，会分权，所以需要将二者的访问合并到一起，这特别在网站架设之初就应该好好规划。&lt;/p&gt;

&lt;p&gt;有很多的第三方DNS解析服务，提供了直接的显示跳转的服务，比如&lt;code&gt;dnspod&lt;/code&gt;，但是最近我在使用的过程中发现该服务非常的不稳定，导致网站经常性的访问不了。所以就打算自己来做，方法很简单，就是&lt;code&gt;301跳转&lt;/code&gt;，&lt;strong&gt;301是永久跳转&lt;/strong&gt;，&lt;strong&gt;302是临时性跳转&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用python处理csv文件</title>
      <link>https://blog.qikqiak.com/post/python-process-csv-file/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/python-process-csv-file/</guid>
      <description>&lt;p&gt;&lt;code&gt;CSV&lt;/code&gt;通常是纯文本文件。可以用&lt;code&gt;Sublime Text&lt;/code&gt;或者&lt;code&gt;EXCEL&lt;/code&gt;打开，&lt;code&gt;python&lt;/code&gt;提供了一个非常强大的处理csv文件的库csv。&lt;/p&gt;

&lt;p&gt;一般情况，如果csv文件不是很复杂则可以直接输出文件中每行的数据，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

def read_csv_file(path):
    with open(path, &#39;rb&#39;) as f:  # r表示读取，b表示读取的文件
        reader = csv.reader(f)
        for row in reader:
            print row
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自定义django admin后台的action</title>
      <link>https://blog.qikqiak.com/post/custom-django-admin-actions/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/custom-django-admin-actions/</guid>
      <description>&lt;p&gt;提到强大的&lt;code&gt;django&lt;/code&gt;，最能引起大家共鸣的可能是其自带的&lt;code&gt;admin&lt;/code&gt;了，提供了默认的强大的功能，而且我们还能根据自己的需求进行定制。&lt;code&gt;django admin&lt;/code&gt;的列表页自带了一个批量删除所选对象的action，我们还可以添加自定义的功能action来实现其他功能，比如批量标记将文章标记为已发布。如下代码：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django下url函数的用法</title>
      <link>https://blog.qikqiak.com/post/django-url-function-usage/</link>
      <pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/django-url-function-usage/</guid>
      <description>&lt;p&gt;Django下有一个比较隐含的函数&lt;strong&gt;url&lt;/strong&gt;，在&lt;code&gt;django/conf/urls/defaults&lt;/code&gt;模块中，虽然只有短短的10行代码，但功能却很了得。起初初学&lt;code&gt;Django&lt;/code&gt;，并没有发现它，Templates的链接地址都是根据&lt;code&gt;urlpatterns&lt;/code&gt;定义的地址，拼凑成地址字符串，很难看，而且Templates里拼凑成的地址，随着页面的增加而不断增加，一旦在&lt;code&gt;urlpatterns&lt;/code&gt;里的某个地址改变了名称，那眼泪可是哗哗的，有多少的拼凑的地址就得改动多少处！这时发现了url函数，这下可都好了，不管&lt;code&gt;urlpatterns&lt;/code&gt;里的某个地址叫法怎么改变，&lt;code&gt;Templates&lt;/code&gt;里的地址都不用修改了。&lt;/p&gt;

&lt;p&gt;比如没有采用url函数的时候：&lt;code&gt;urlpatterns&lt;/code&gt;里定义了资讯的首页地址,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;urlpatterns = patterns(&#39;&#39;,
    (r&#39;^article$&#39;,&#39;news_index&#39; ),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memcached的一些坑!!!</title>
      <link>https://blog.qikqiak.com/post/some-pits-of-memcached/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/some-pits-of-memcached/</guid>
      <description>&lt;p&gt;我们的网站用&lt;code&gt;django&lt;/code&gt;跑了很久了，一直没出现什么大的问题，突然一天晚上网站访问超级慢，出现大量的&lt;code&gt;502&lt;/code&gt;错误码，难不成用户量猛增么，要是这样就好了。请教了很多运维高手帮忙排查问题、代码也回滚到上一个正常运行的版本了，但依然负载一会高一会低。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;捣腾了一天，最后定位到我们的代码有问题，有几个经常访问的API缓存了15分钟，经过分析发现其中一个API始终缓存不上，但在本地和测试环境都是没有问题的，这真是搞死人啊。后面发现这个API的请求的数据非常之大，接近2M了。而&lt;strong&gt;Memcache有很多限制，其中就有value值大小的限制&lt;/strong&gt;，终于找到问题了，泪牛满面啊&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django国际化问题</title>
      <link>https://blog.qikqiak.com/post/django-i18n/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/django-i18n/</guid>
      <description>&lt;p&gt;最近准备用用django的国际化功能，用的django1.6.5版本，按照网上说的教程始终不生效，最终只能去看官方文档，不得不说还是官方文档靠谱啊，下面记录了下django1.6+启用国际化的相关步骤。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django自定义标签之inclusion_tag的用法</title>
      <link>https://blog.qikqiak.com/post/django-custom-tag-inclusion_tag/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.qikqiak.com/post/django-custom-tag-inclusion_tag/</guid>
      <description>&lt;p&gt;&lt;code&gt;django&lt;/code&gt;提供了强大的自定义标签、自定义过滤器等强大功能，今天首先介绍一下自定义标签的&lt;code&gt;inclusion_tags&lt;/code&gt;的用法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>